name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/bithealth-service/bithealth-service
  JAVA_VERSION: '17'
  MAVEN_ARGS: "-B --errors --fail-at-end" # Common Maven args

jobs:
  build_and_test:
    name: Build, Test & Package
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read code
      actions: read # Needed for downloading artifacts in dependent jobs? (Check docs)
    outputs:
      jar_name: ${{ steps.set_jar_name.outputs.name }} # Output the JAR name
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - name: Build, Test, Coverage, Package
        run: mvn ${{ env.MAVEN_ARGS }} clean verify # Runs test, coverage, package
      - name: Set Jar Name Output # Find the built JAR name dynamically
        id: set_jar_name
        run: echo "name=$(ls target/*.jar | grep -v 'original' | head -n 1)" >> $GITHUB_OUTPUT
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ${{ steps.set_jar_name.outputs.name }}
      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar_analysis:
    name: Static Analysis (SAST)
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read # For checkout
      security-events: write # If using GitHub code scanning integration with Sonar
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 } # Full history for Sonar
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with: { java-version: ${{ env.JAVA_VERSION }}, distribution: 'temurin', cache: maven }
      - name: Download JaCoCo report # Needed for coverage analysis
        uses: actions/download-artifact@v4
        with: { name: jacoco-report, path: target/site/jacoco }
      # Cache SonarCloud Packages (Optional if setup-java cache isn't sufficient)
      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with: { path: ~/.sonar/cache, key: ${{ runner.os }}-sonar, restore-keys: ${{ runner.os }}-sonar }
      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Run sonar:sonar directly. It assumes tests/compilation done by 'verify' in previous job
        # May need to adjust pom.xml or args if it tries to re-run tests
        run: mvn ${{ env.MAVEN_ARGS }} sonar:sonar -Dsonar.projectKey=NUS-ISS-Projects_BitHealth-service -Dsonar.java.coveragePlugin=jacoco -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  dast_scan:
    name: Dynamic Analysis (DAST)
    needs: build_and_test
    runs-on: ubuntu-latest
    # Only run on push to main, or adjust as needed for PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read # For checkout if needed, or just artifact download
      actions: read # For artifact download
    steps:
      - uses: actions/checkout@v3 # May not be needed if only using the JAR
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/
      - name: Start Application for DAST
        run: |
          JAR_FILE=$(ls target/*.jar | head -n 1)
          echo "Starting $JAR_FILE"
          java -jar $JAR_FILE & # Run in background
          # Health Check Loop (Example using curl, requires actuator/health)
          echo "Waiting for application to start..."
          timeout 120 bash -c ' \
            until curl -sf http://localhost:8080/actuator/health; do \
              echo -n "."; \
              sleep 5; \
            done; \
            echo " Application started!"' || (echo "Application failed to start" && exit 1)
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.8.0 # Or newer
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8080'
          fail_action: 'true'
          allow_issue_writing: 'false'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable' # Specify working image
      - name: Upload DAST HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html # Default path from ZAP action

  build_and_push_docker:
    name: Build and Push Docker Image
    needs: build_and_test
    runs-on: ubuntu-latest
    # Only run on push to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read # To read Dockerfile etc.
      packages: write # To push to GHCR
      actions: read # For artifact download
    steps:
      - uses: actions/checkout@v3
      - name: Set Image Tag
        # Use SHA for better traceability
        run: echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/
      - name: Verify downloaded JAR
        run: ls -l target/
      - uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest