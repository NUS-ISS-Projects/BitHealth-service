name: Build with Maven, Unit Tests, Code Coverage, and Static Analysis

on:
  push:

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/bithealth-service/bithealth-service

jobs:
  build:
    name: Build, Unit Tests, and Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven and Run Tests
        run: mvn -B package --file pom.xml

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4.6.1
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar:
    name: Static Analysis with SonarCloud (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source (Full History)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=NUS-ISS-Projects_BitHealth-service

  # Optional DAST Step
  dast:
    name: Dynamic Application Security Testing (DAST) with OWASP ZAP
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Start BitHealth for DAST
        run: |
          mvn spring-boot:run -Dspring-boot.run.profiles=ci &
          sleep 30

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8080'
          fail_action: 'true'
          allow_issue_writing: 'false'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable' 

      - name: Upload DAST HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html

  setup-build-deploy:
    name: Setup, Build, and Store Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Maven Clean Install
        run: mvn clean install --batch-mode --errors --fail-at-end

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: bithealth-app.jar
          path: target/

  build-docker-image:
    name: Dockerize and Push to GitHub Container Registry
    needs: setup-build-deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set build date as image tag
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Retrieve Saved Artifact
        uses: actions/download-artifact@v4.1.9
        with:
          name: bithealth-app.jar
          path: target/

      - name: List Files in Artifact Directory
        run: ls target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Multi-Architecture Docker Image
        run: |
          docker buildx build \
            --platform=linux/amd64,linux/arm64 \
            --tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --push .
