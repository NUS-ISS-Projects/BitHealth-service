# Updated Workflow File

name: Build with Maven, Unit Tests, Code Coverage, and Static Analysis

on:
  push:

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/bithealth-service/bithealth-service

jobs:
  build:
    name: Build, Unit Tests, and Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven and Run Tests
        run: mvn -B package --file pom.xml

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4.6.1
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar:
    name: Static Analysis with SonarCloud (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source (Full History)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # Switched back to temurin for consistency

      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=NUS-ISS-Projects_BitHealth-service

  dast:
    name: Dynamic Application Security Testing (DAST) with OWASP ZAP
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ci_user
          POSTGRES_PASSWORD: ci_password
          POSTGRES_DB: ci_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Permit ZAP to write reports
        run: sudo chmod -R a+rwX $GITHUB_WORKSPACE

      - name: Start BitHealth for DAST and Wait for Health Check
        id: start_app
        env:
          SPRING_PROFILES_ACTIVE: ci
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ci_db
          SPRING_DATASOURCE_USERNAME: ci_user
          SPRING_DATASOURCE_PASSWORD: ci_password
          FIREBASE_SA_B64: ${{ secrets.FIREBASE_SA_B64_CI }}
        run: |
          echo "Waiting for PostgreSQL service..."
          sleep 15

          echo "Starting application with DB service..."
          nohup mvn spring-boot:run \
            -Dspring-boot.run.profiles=ci \
            -Dspring-boot.run.arguments="--server.address=0.0.0.0" \
            > app.log 2>&1 &
          APP_PID=$!
          echo "Application started with PID $APP_PID. Waiting up to 120s for server to respond on port 8080..."

          for i in {1..60}; do
            if curl -s --connect-timeout 5 http://localhost:8080 -o /dev/null; then
              echo "âœ… Server is responding on port 8080!"
              exit 0
            fi
            if ! kill -0 $APP_PID > /dev/null 2>&1; then
              echo "::error::Application process $APP_PID exited prematurely."
              echo "--- Application Log (app.log) ---"
              cat app.log || echo "app.log not found or empty"
              echo "--- End Application Log ---"
              exit 1
            fi
            echo "Waiting for connection... Attempt $i/60"
            sleep 2
          done

          echo "::error::Application server failed to respond on http://localhost:8080 within 120 seconds."
          echo "--- Application Log (app.log) ---"
          cat app.log || echo "app.log not found or empty"
          echo "--- End Application Log ---"
          kill $APP_PID || echo "Failed to kill unresponsive process $APP_PID"
          exit 1

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.8.0 # Or v0.11.0 - whichever you prefer
        # --- ADD THIS LINE ---
        continue-on-error: true # Allow workflow to proceed even if this step fails internally
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8080'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          allow_issue_writing: false
          # artifact_name parameter should remain REMOVED

      - name: Upload DAST HTML Report
        uses: actions/upload-artifact@v4
        if: always() # Ensures this runs even if the previous step is marked as failed
        with:
          name: zap-baseline-report-html
          path: report_html.html

  setup-build-deploy:
    name: Setup, Build, and Store Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Maven Clean Install
        run: mvn clean install --batch-mode --errors --fail-at-end

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: bithealth-app.jar
          path: target/*.jar

  build-docker-image:
    name: Dockerize and Push to GitHub Container Registry
    needs: setup-build-deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set build date as image tag
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Retrieve Saved Artifact
        uses: actions/download-artifact@v4.1.9
        with:
          name: bithealth-app.jar
          path: target/

      - name: List Files in Artifact Directory
        run: ls -l target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Architecture Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max