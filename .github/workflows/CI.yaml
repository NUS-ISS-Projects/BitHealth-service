name: CI â€“ Build, Test, SAST, DAST & Docker

on:
  push:

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/bithealth-service/bithealth-service

jobs:
  build:
    name: Build, Unit Tests & Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Build & Test with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar:
    name: Static Analysis with SonarCloud (SAST)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Full History
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu

      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=NUS-ISS-Projects_BitHealth-service

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      # Start your application in the background on a test port
      - name: Start BitHealth for DAST
        run: |
          mvn spring-boot:run -Dspring-boot.run.profiles=ci &
          # give it some time to boot
          sleep 30

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          format: 'html'
          output: 'zap_report.html'
          failAction: 'error'

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

  setup-build-deploy:
    name: Build & Package Artifact
    runs-on: ubuntu-latest
    needs: [build, sonar]

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Maven Clean Install
        run: mvn clean install --batch-mode --errors --fail-at-end

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bithealth-app.jar
          path: target/bithealth-service-*.jar

  build-docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: setup-build-deploy
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: bithealth-app.jar
          path: target/

      - name: List Artifacts
        run: ls target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build & Push Multi-Arch Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --push .
